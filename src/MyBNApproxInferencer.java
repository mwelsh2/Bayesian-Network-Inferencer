import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import core.Assignment;
import core.BayesianNetwork;
import core.Distribution;
import core.RandomVariable;
import core.Value;
import inference.GibbsSamplingInferencer;
import inference.LikelihoodWeightingInferencer;
import inference.RejectionSamplingInferencer;

/**
 * Implements an approximate inference of a Bayesian network generated by parsing
 * .bif or .xml files, and accepting input arguments from the user
 */
public class MyBNApproxInferencer extends MyBNInferencer {

    int n; // number of samples

    public MyBNApproxInferencer() {
        super();
    }

    // Performs an axproximate inference using the Bayesian network generated by
    // the parser, and the query variable, evidence, inference type, and sample
    // size specified
    // by the user
    public void approxInfer(String type, String argv[]) throws IOException, ParserConfigurationException, SAXException {
        BayesianNetwork bn = createBayesianNetwork("examples/".concat(argv[2]));
        RandomVariable X = getRandomVariable(3, argv, bn);
        Assignment e = getEvidence(5, argv, bn);
        Distribution dist = new base.Distribution(X);
        switch (type.toLowerCase()) {
            case ("rsi"):
                printInfo("Rejection Sampling Inference", X.toString(), e.toString());
                RejectionSamplingInferencer reject = new RejectionSamplingInferencer();
                dist = reject.query(X, e, bn, n);
                break;
            case ("lwi"):
                printInfo("Likelihood Weighting Inference", X.toString(), e.toString());
                LikelihoodWeightingInferencer weight = new LikelihoodWeightingInferencer();
                dist = weight.query(X, e, bn, n);
                break;
            case ("gsi"):
                printInfo("Gibbs Sampling Inference", X.toString(), e.toString());
                GibbsSamplingInferencer gibbs = new GibbsSamplingInferencer();
                dist = gibbs.query(X, e, bn, n);
                break;
        }

        System.out.print("P(" + X + "|" + e.toString().replace("{","").replace("}","") + ") = <");
        int i = 0;
        for (Value v: X.getDomain()) {
            i++;
            System.out.printf("%.4f", dist.get(v));
            if (i == X.getDomain().size()) {
                System.out.println(">\n");
            } else { 
                System.out.print(", ");
            }
        }
    }

    public void approxInferAll(String[] argv) throws IOException, ParserConfigurationException, SAXException {
        String[] shift = new String[argv.length + 1];
        for (int i = 0; i < argv.length; i++) {
            shift[i+1] = argv[i];
        }
        approxInfer("rsi", shift);
        approxInfer("lwi", shift);
        approxInfer("gsi", shift);
    }

     // Prints the query, the given evidence, the type of inference and the
     // number of samples
    public void printInfo(String type, String X, String a) {
        print(type, X, a);
        System.out.println("\nFor " + n + " samples:");
    }

    public static void main(String[] argv) throws IOException, ParserConfigurationException, SAXException {
        MyBNApproxInferencer infer = new MyBNApproxInferencer();

        infer.n = 0;
        if (argv.length > 0) {
            infer.n = Integer.parseInt(argv[0]);
        }

        if (argv[1].contains(".")) {
            infer.approxInferAll(argv);
        } else {
            infer.approxInfer(argv[1], argv);
        }
    }

}
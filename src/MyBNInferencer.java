import java.io.FileInputStream;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import core.*;
import inference.EnumerationInferencer;
import base.BooleanValue;
import base.StringValue;
import parser.BIFParser;
import parser.XMLBIFParser;

/**
 * Implements an exact inference of a Bayesian network generated by parsing
 * .bif or .xml files, and accepting input arguments from the user
 */
public class MyBNInferencer {

    // Shorthands
    BooleanValue TRUE = BooleanValue.TRUE;
    BooleanValue FALSE = BooleanValue.FALSE;

    public MyBNInferencer() {}

    // Calculate and print distribution of query variable X, given evidence e,
    // using the given BayesianNetwork bn
    public void infer(RandomVariable X, Assignment e, BayesianNetwork bn) {
        Inferencer exact = new EnumerationInferencer();
        Distribution dist = exact.query(X, e, bn);
        System.out.print("P(" + X + "|" + e.toString().replace("{","").replace("}","") + ") = <");
        int i = 0;
        for (Value v: X.getDomain()) {
            i++;
            System.out.printf("%.4f", dist.get(v));
            if (i == X.getDomain().size()) {
                System.out.println(">\n");
            } else { 
                System.out.print(", ");
            }
        }
    }

    // Generate the query variable specified by user input
    public RandomVariable getRandomVariable(int index, String[] argv, BayesianNetwork bn) {
        return bn.getVariableByName(argv[index]);
    }

    // Parse given file to create a BayesianNetwork
    public BayesianNetwork createBayesianNetwork(String filename) throws IOException, ParserConfigurationException, SAXException {
        if (filename.contains(".bif")) {
            BIFParser bif_parser = new BIFParser(new FileInputStream(filename));
            return bif_parser.parseNetwork();  
        } else {
            XMLBIFParser xml_parser = new XMLBIFParser();
            return xml_parser.readNetworkFromFile(filename);
        }
    }

    // Generate the evidence specified by the user input
    public Assignment getEvidence(int start, String[] argv, BayesianNetwork bn) {
        Assignment a = new base.Assignment();
        for (int i = start; i < argv.length; i+= 2) {
            if (argv[i].equalsIgnoreCase("false")) {
                a.put(bn.getVariableByName(argv[i-1]), FALSE);
            } else if (argv[i].equalsIgnoreCase("true")) {
                
                a.put(bn.getVariableByName(argv[i-1]), TRUE);
            } else {
                a.put(bn.getVariableByName(argv[i-1]), new StringValue(argv[i].toLowerCase()));
            }
        }
        return a;
    }

    // Prints the query, the given evidence, and the type of inference (in this
    // case Enumeration)
    public void print(String type, String X, String a) {
        System.out.println("--------------------------------------------------------------------");
        System.out.print("Testing " + type + " on P(" + X + "|" + a.replace("{","").replace("}","") + ")");
        System.out.println("\n--------------------------------------------------------------------");
    }

    public static void main(String[] argv) throws IOException, ParserConfigurationException, SAXException {
        MyBNInferencer infer = new MyBNInferencer();
        
        String filename = "examples/";
        if (argv.length > 0) {
            filename = filename.concat(argv[0]);
        }

        BayesianNetwork bn = infer.createBayesianNetwork(filename);
        RandomVariable X = infer.getRandomVariable(1, argv, bn);
        Assignment e = infer.getEvidence(3, argv, bn);
        infer.print("Enumeration Inference", X.toString(), e.toString());
        infer.infer(X, e, bn);
    }
}